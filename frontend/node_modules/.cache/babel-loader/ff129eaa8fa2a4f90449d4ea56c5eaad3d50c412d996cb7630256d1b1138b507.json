{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst host = 'localhost:3001';\nconst SpeedSlalomRecordTable = () => {\n  _s();\n  const [SSRecords, setSSRecords] = useState([]);\n  useEffect(() => {\n    axios.get(`http://${host}/api/getSSRecord`).then(response => {\n      setSSRecords(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  useEffect(() => {\n    if (SSRecords.length > 0) {\n      const athletesData = {};\n      SSRecords.forEach(record => {\n        const athleteName = record.AthleteName;\n        if (!athletesData[athleteName]) {\n          athletesData[athleteName] = {\n            'SS.12m.min': Infinity,\n            'SS.12m.Max': -Infinity,\n            'SS.12m.Avg': 0,\n            'SS.kicked.min': Infinity,\n            'SS.kicked.Max': -Infinity,\n            'SS.kicked.Avg': 0,\n            'SS.missed.min': Infinity,\n            'SS.missed.Max': -Infinity,\n            'SS.missed.Avg': 0\n          };\n        }\n        athletesData[athleteName]['SS.12m.min'] = Math.min(athletesData[athleteName]['SS.12m.min'], SSRecords.time12m);\n        athletesData[athleteName]['SS.12m.Max'] = Math.max(athletesData[athleteName]['SS.12m.Max'], SSRecords.time12m);\n        athletesData[athleteName]['SS.12m.Avg'] += record.time12m;\n        athletesData[athleteName]['SS.kicked.min'] = Math.min(athletesData[athleteName]['SS.kicked.min'], SSRecords.kickedCone);\n        athletesData[athleteName]['SS.kicked.Max'] = Math.max(athletesData[athleteName]['SS.kicked.Max'], SSRecords.kickedCone);\n        athletesData[athleteName]['SS.kicked.Avg'] += record.kickedCone;\n        athletesData[athleteName]['SS.missed.min'] = Math.min(athletesData[athleteName]['SS.missed.min'], SSRecords.missedCone);\n        athletesData[athleteName]['SS.missed.Max'] = Math.max(athletesData[athleteName]['SS.missed.Max'], SSRecords.missedCone);\n        athletesData[athleteName]['SS.missed.Avg'] += record.missedCone;\n        athletesData[athleteName]['SS.Endline.min'] = Math.min(athletesData[athleteName]['SS.Endline.min'], SSRecords.endLine ? 1 : 0);\n        athletesData[athleteName]['SS.Endline.Max'] = Math.max(athletesData[athleteName]['SS.Endline.Max'], SSRecords.endLine ? 1 : 0);\n        athletesData[athleteName]['SS.Endline.Avg'] += record.endLine ? 1 : 0;\n        athletesData[athleteName]['SS.FinTime.min'] = Math.min(athletesData[athleteName]['SS.FinTime.min'], SSRecords.time);\n        athletesData[athleteName]['SS.FinTim.Max'] = Math.max(athletesData[athleteName]['SS.FinTim.Max'], SSRecords.time);\n        athletesData[athleteName]['SS.FinTim.Avg'] += record.time;\n      });\n      Object.keys(athletesData).forEach(athleteName => {\n        athletesData[athleteName]['SS.12m.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n        athletesData[athleteName]['SS.kicked.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n        athletesData[athleteName]['SS.missed.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n        athletesData[athleteName]['SS.Endline.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n        athletesData[athleteName]['SS.FinTim.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n      });\n    }\n  });\n};\n_s(SpeedSlalomRecordTable, \"eWoF67qfqym3cm//V8a8avxz7OE=\");\n_c = SpeedSlalomRecordTable;\nexport default SpeedSlalomRecordTable;\nvar _c;\n$RefreshReg$(_c, \"SpeedSlalomRecordTable\");","map":{"version":3,"names":["useState","useEffect","axios","host","SpeedSlalomRecordTable","_s","SSRecords","setSSRecords","get","then","response","data","catch","error","console","length","athletesData","forEach","record","athleteName","AthleteName","Infinity","Math","min","time12m","max","kickedCone","missedCone","endLine","time","Object","keys","filter","_c","$RefreshReg$"],"sources":["C:/Users/issaclee/nodejs/training-record/frontend/src/Pages/AnalyzeSSR.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { SpeedSlalomForm } from '../Model/Interface';\r\n\r\nconst host = 'localhost:3001';\r\ninterface Props {\r\n    speedSlalomRecords: SpeedSlalomForm[];\r\n}\r\n\r\nconst SpeedSlalomRecordTable = () => {\r\n    const [SSRecords, setSSRecords] = useState<SpeedSlalomForm[]>([]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://${host}/api/getSSRecord`)\r\n            .then(response => {\r\n                setSSRecords(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (SSRecords.length > 0) {\r\n            const athletesData: { [key: string]: any } = {};\r\n            SSRecords.forEach(record => {\r\n                const athleteName = record.AthleteName;\r\n                if (!athletesData[athleteName]) {\r\n                    athletesData[athleteName] = {\r\n                        'SS.12m.min': Infinity,\r\n                        'SS.12m.Max': -Infinity,\r\n                        'SS.12m.Avg': 0,\r\n                        'SS.kicked.min': Infinity,\r\n                        'SS.kicked.Max': -Infinity,\r\n                        'SS.kicked.Avg': 0,\r\n                        'SS.missed.min': Infinity,\r\n                        'SS.missed.Max': -Infinity,\r\n                        'SS.missed.Avg': 0,\r\n                    };\r\n                }\r\n                athletesData[athleteName]['SS.12m.min'] = Math.min(athletesData[athleteName]['SS.12m.min'], SSRecords.time12m);\r\n                athletesData[athleteName]['SS.12m.Max'] = Math.max(athletesData[athleteName]['SS.12m.Max'], SSRecords.time12m);\r\n                athletesData[athleteName]['SS.12m.Avg'] += record.time12m;\r\n                athletesData[athleteName]['SS.kicked.min'] = Math.min(athletesData[athleteName]['SS.kicked.min'], SSRecords.kickedCone);\r\n                athletesData[athleteName]['SS.kicked.Max'] = Math.max(athletesData[athleteName]['SS.kicked.Max'], SSRecords.kickedCone);\r\n                athletesData[athleteName]['SS.kicked.Avg'] += record.kickedCone;\r\n                athletesData[athleteName]['SS.missed.min'] = Math.min(athletesData[athleteName]['SS.missed.min'], SSRecords.missedCone);\r\n                athletesData[athleteName]['SS.missed.Max'] = Math.max(athletesData[athleteName]['SS.missed.Max'], SSRecords.missedCone);\r\n                athletesData[athleteName]['SS.missed.Avg'] += record.missedCone;\r\n                athletesData[athleteName]['SS.Endline.min'] = Math.min(athletesData[athleteName]['SS.Endline.min'], SSRecords.endLine ? 1 : 0);\r\n                athletesData[athleteName]['SS.Endline.Max'] = Math.max(athletesData[athleteName]['SS.Endline.Max'], SSRecords.endLine ? 1 : 0);\r\n                athletesData[athleteName]['SS.Endline.Avg'] += record.endLine ? 1 : 0;\r\n                athletesData[athleteName]['SS.FinTime.min'] = Math.min(athletesData[athleteName]['SS.FinTime.min'], SSRecords.time);\r\n                athletesData[athleteName]['SS.FinTim.Max'] = Math.max(athletesData[athleteName]['SS.FinTim.Max'], SSRecords.time);\r\n                athletesData[athleteName]['SS.FinTim.Avg'] += record.time;\r\n            });\r\n            Object.keys(athletesData).forEach(athleteName => {\r\n                athletesData[athleteName]['SS.12m.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                athletesData[athleteName]['SS.kicked.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                athletesData[athleteName]['SS.missed.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                athletesData[athleteName]['SS.Endline.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                athletesData[athleteName]['SS.FinTim.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n            });\r\n        }\r\n    })\r\n}\r\n\r\nexport default SpeedSlalomRecordTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}