{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\issaclee\\\\nodejs\\\\training-record\\\\frontend\\\\src\\\\Pages\\\\AnalyzeSSR.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst host = 'localhost:3001';\nconst AnalyzeSSR = () => {\n  _s();\n  const [SSRecords, setSSRecords] = useState([]);\n  const [athletesData, setAthletesData] = useState({});\n  useEffect(() => {\n    const fetchAthletes = async () => {\n      const response = await axios.get(`http://${host}/api/getSSRecord`).then(response => {\n        setSSRecords(response.data);\n        setAthletesData(response.data.map(athlete => athlete.athleteName));\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n    fetchAthletes();\n  }, []);\n  useEffect(() => {\n    const fetchAthletes = async () => {\n      try {\n        const response = await axios.get(`http://${host}/api/getSSRecord`);\n        setAthletesData(response.data.map(athlete => athlete.athleteName));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchAthletes();\n  }, []);\n  if (SSRecords.length > 0) {\n    const athletesData = {};\n    SSRecords.forEach(record => {\n      const athleteName = record.AthleteName;\n      if (!athletesData[athleteName]) {\n        athletesData[athleteName] = {\n          'SS.12m.min': Infinity,\n          'SS.12m.Max': -Infinity,\n          'SS.12m.Avg': 0,\n          'SS.kicked.min': Infinity,\n          'SS.kicked.Max': -Infinity,\n          'SS.kicked.Avg': 0,\n          'SS.missed.min': Infinity,\n          'SS.missed.Max': -Infinity,\n          'SS.missed.Avg': 0\n        };\n      }\n      //     athletesData[athleteName]['SS.12m.min'] = Math.min(athletesData[athleteName]['SS.12m.min'], SSRecords.time12m);\n      //     athletesData[athleteName]['SS.12m.Max'] = Math.max(athletesData[athleteName]['SS.12m.Max'], SSRecords.time12m);\n      //     athletesData[athleteName]['SS.12m.Avg'] += record.time12m;\n      //     athletesData[athleteName]['SS.kicked.min'] = Math.min(athletesData[athleteName]['SS.kicked.min'], SSRecords.kickedCone);\n      //     athletesData[athleteName]['SS.kicked.Max'] = Math.max(athletesData[athleteName]['SS.kicked.Max'], SSRecords.kickedCone);\n      //     athletesData[athleteName]['SS.kicked.Avg'] += record.kickedCone;\n      //     athletesData[athleteName]['SS.missed.min'] = Math.min(athletesData[athleteName]['SS.missed.min'], SSRecords.missedCone);\n      //     athletesData[athleteName]['SS.missed.Max'] = Math.max(athletesData[athleteName]['SS.missed.Max'], SSRecords.missedCone);\n      //     athletesData[athleteName]['SS.missed.Avg'] += record.missedCone;\n      //     athletesData[athleteName]['SS.Endline.min'] = Math.min(athletesData[athleteName]['SS.Endline.min'], SSRecords.endLine ? 1 : 0);\n      //     athletesData[athleteName]['SS.Endline.Max'] = Math.max(athletesData[athleteName]['SS.Endline.Max'], SSRecords.endLine ? 1 : 0);\n      //     athletesData[athleteName]['SS.Endline.Avg'] += record.endLine ? 1 : 0;\n      //     athletesData[athleteName]['SS.FinTime.min'] = Math.min(athletesData[athleteName]['SS.FinTime.min'], SSRecords.time);\n      //     athletesData[athleteName]['SS.FinTim.Max'] = Math.max(athletesData[athleteName]['SS.FinTim.Max'], SSRecords.time);\n      //     athletesData[athleteName]['SS.FinTim.Avg'] += record.time;\n      // });\n      // Object.keys(athletesData).forEach(athleteName => {\n      //     athletesData[athleteName]['SS.12m.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n      //     athletesData[athleteName]['SS.kicked.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n      //     athletesData[athleteName]['SS.missed.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n      //     athletesData[athleteName]['SS.Endline.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n      //     athletesData[athleteName]['SS.FinTim.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SSR Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"SSR Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(AnalyzeSSR, \"A3yOAdggvBoTABmieBEBLpb/Ef4=\");\n_c = AnalyzeSSR;\nexport default AnalyzeSSR;\nvar _c;\n$RefreshReg$(_c, \"AnalyzeSSR\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","host","AnalyzeSSR","_s","SSRecords","setSSRecords","athletesData","setAthletesData","fetchAthletes","response","get","then","data","map","athlete","athleteName","catch","error","console","length","forEach","record","AthleteName","Infinity","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/issaclee/nodejs/training-record/frontend/src/Pages/AnalyzeSSR.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { SpeedSlalomBasic } from '../Model/Interface';\r\n\r\nconst host = 'localhost:3001';\r\ninterface Props {\r\n    speedSlalomRecords: SpeedSlalomBasic[];\r\n}\r\n\r\nconst AnalyzeSSR = () => {\r\n    const [SSRecords, setSSRecords] = useState<SpeedSlalomBasic[]>([]);\r\n    const [athletesData, setAthletesData] = useState<any>({});\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchAthletes = async () => {\r\n        const response = await axios.get(`http://${host}/api/getSSRecord`)\r\n            .then(response => {\r\n                setSSRecords(response.data);\r\n                setAthletesData(response.data.map((athlete: any) => athlete.athleteName));\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n        }\r\n            fetchAthletes();\r\n        }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchAthletes = async () => {\r\n            try {\r\n              const response = await axios.get(`http://${host}/api/getSSRecord`);\r\n              setAthletesData(response.data.map((athlete: any) => athlete.athleteName));\r\n            } catch (error) {\r\n              console.error(error);\r\n            }\r\n          };\r\n          fetchAthletes();\r\n        }, []);\r\n\r\n        if (SSRecords.length > 0) {\r\n            const athletesData: { [key: string]: any } = {};\r\n            SSRecords.forEach(record => {\r\n                const athleteName = record.AthleteName;\r\n                if (!athletesData[athleteName]) {\r\n                    athletesData[athleteName] = {\r\n                        'SS.12m.min': Infinity,\r\n                        'SS.12m.Max': -Infinity,\r\n                        'SS.12m.Avg': 0,\r\n                        'SS.kicked.min': Infinity,\r\n                        'SS.kicked.Max': -Infinity,\r\n                        'SS.kicked.Avg': 0,\r\n                        'SS.missed.min': Infinity,\r\n                        'SS.missed.Max': -Infinity,\r\n                        'SS.missed.Avg': 0,\r\n                    };\r\n                }\r\n                //     athletesData[athleteName]['SS.12m.min'] = Math.min(athletesData[athleteName]['SS.12m.min'], SSRecords.time12m);\r\n                //     athletesData[athleteName]['SS.12m.Max'] = Math.max(athletesData[athleteName]['SS.12m.Max'], SSRecords.time12m);\r\n                //     athletesData[athleteName]['SS.12m.Avg'] += record.time12m;\r\n                //     athletesData[athleteName]['SS.kicked.min'] = Math.min(athletesData[athleteName]['SS.kicked.min'], SSRecords.kickedCone);\r\n                //     athletesData[athleteName]['SS.kicked.Max'] = Math.max(athletesData[athleteName]['SS.kicked.Max'], SSRecords.kickedCone);\r\n                //     athletesData[athleteName]['SS.kicked.Avg'] += record.kickedCone;\r\n                //     athletesData[athleteName]['SS.missed.min'] = Math.min(athletesData[athleteName]['SS.missed.min'], SSRecords.missedCone);\r\n                //     athletesData[athleteName]['SS.missed.Max'] = Math.max(athletesData[athleteName]['SS.missed.Max'], SSRecords.missedCone);\r\n                //     athletesData[athleteName]['SS.missed.Avg'] += record.missedCone;\r\n                //     athletesData[athleteName]['SS.Endline.min'] = Math.min(athletesData[athleteName]['SS.Endline.min'], SSRecords.endLine ? 1 : 0);\r\n                //     athletesData[athleteName]['SS.Endline.Max'] = Math.max(athletesData[athleteName]['SS.Endline.Max'], SSRecords.endLine ? 1 : 0);\r\n                //     athletesData[athleteName]['SS.Endline.Avg'] += record.endLine ? 1 : 0;\r\n                //     athletesData[athleteName]['SS.FinTime.min'] = Math.min(athletesData[athleteName]['SS.FinTime.min'], SSRecords.time);\r\n                //     athletesData[athleteName]['SS.FinTim.Max'] = Math.max(athletesData[athleteName]['SS.FinTim.Max'], SSRecords.time);\r\n                //     athletesData[athleteName]['SS.FinTim.Avg'] += record.time;\r\n                // });\r\n                // Object.keys(athletesData).forEach(athleteName => {\r\n                //     athletesData[athleteName]['SS.12m.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                //     athletesData[athleteName]['SS.kicked.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                //     athletesData[athleteName]['SS.missed.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                //     athletesData[athleteName]['SS.Endline.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n                //     athletesData[athleteName]['SS.FinTim.Avg'] /= SSRecords.filter(record => record.AthleteName === athleteName).length;\r\n\r\n            }\r\n            );\r\n        }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>SSR Analysis</h1>\r\n            <p>SSR Analysis</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnalyzeSSR;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}