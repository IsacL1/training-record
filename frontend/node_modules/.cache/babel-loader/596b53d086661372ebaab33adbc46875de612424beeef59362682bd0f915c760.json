{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\issaclee\\\\nodejs\\\\training-record\\\\frontend\\\\src\\\\Pages\\\\AthleteReg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify';\n//import { AthleteInfoForm } from '../Model/Interface';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverHost = 'localhost:3001';\nasync function getNextAthleteId() {\n  try {\n    // Retrieve the total count of documents in the collection\n    const response = await axios.get(`http://${serverHost}/api/athletes/count`);\n    const count = response.data.count;\n    console.log(count);\n    // Increment the count by 1 to get the next ID\n    if (count === null || count === undefined) {\n      return 'S001'; // return the first athlete ID if there are no records\n    } else {\n      const nextId = count + 1;\n      // Format the ID as per your requirements\n      const formattedId = `S${nextId.toString().padStart(3, '0')}`;\n      return formattedId;\n    }\n  } catch (error) {\n    console.error('Error retrieving athlete count:', error);\n    throw error;\n  }\n}\nconst AthleteReg = () => {\n  _s();\n  const [AthleteInfoForm, setAthleteInfoForm] = useState({\n    athleteId: '',\n    athleteName: '',\n    bod: new Date(),\n    phone: '',\n    password: '',\n    //ConfirmPassword: '',\n    addr: '',\n    HKID4digit: ''\n  });\n  const validatePassword = password => {\n    const hasUppercase = /[A-Z]/.test(password);\n    const hasLowercase = /[a-z]/.test(password);\n    const hasNumber = /\\d/.test(password);\n    const isLongEnough = password.length >= 10;\n    if (!password) {\n      setError('Password is required');\n      return true;\n    }\n    if (!isLongEnough) {\n      setError('Password must be at least 10 characters long');\n      return false;\n    }\n    if (!isLongEnough) {\n      toast.error('Password must be at least 10 characters long');\n      return false;\n    }\n    if (!hasUppercase || !hasLowercase || !hasNumber) {\n      toast.error('Password must contain at least one uppercase letter, one lowercase letter, and one number');\n      return false;\n    }\n    return true;\n  };\n  const validatePhoneNumber = phoneNumber => {\n    const isValidPhoneNumber = /^\\d{8}$/.test(phoneNumber);\n    if (!isValidPhoneNumber) {\n      setError('Support HK number only');\n      return false;\n    }\n    setError('');\n    return true;\n  };\n  const validateHKID = HKID => {\n    const isValidHKID = /^[A-Z]\\d{3}$/.test(HKID);\n    if (!isValidHKID) {\n      setError('Invalid HKID format');\n      return false;\n    }\n    setError('');\n    return true;\n  };\n  const [error, setError] = useState('');\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isValidPassword = validatePassword(AthleteInfoForm.password);\n    const isValidPhoneNumber = validatePhoneNumber(AthleteInfoForm.phone);\n    const isValidHKID = validateHKID(AthleteInfoForm.HKID4digit);\n    const newAthleteId = String(getNextAthleteId());\n\n    //setAthleteInfoForm({...AthleteInfoForm, athleteId: newAthleteId});\n\n    if (!isValidPassword || !isValidPhoneNumber || !isValidHKID) {\n      return;\n    }\n\n    // Send data to server\n    axios.post(`http://${serverHost}/api/addAthleteInfo`, AthleteInfoForm).then(response => {\n      console.log(newAthleteId);\n      console.log(response.data);\n      setAthleteInfoForm({\n        athleteId: '',\n        athleteName: '',\n        bod: new Date(),\n        phone: '',\n        password: '',\n        //ConfirmPassword: '',\n        addr: '',\n        HKID4digit: ''\n      });\n      toast.success('Data submitted successfully!');\n    }).catch(error => {\n      console.error(error);\n      toast.error('Error submitting data!');\n    });\n  };\n\n  // Handle change - SppedSlalom form  \n  const handleChange = event => {\n    try {\n      setAthleteInfoForm({\n        ...AthleteInfoForm,\n        [event.target.name]: event.target.value\n      });\n      if (event.target.name === 'bod') {\n        const date = new Date(event.target.value);\n        if (date < AthleteInfoForm.bod) {\n          toast.error('Date should not be in the future');\n        } else {\n          setAthleteInfoForm({\n            ...AthleteInfoForm,\n            bod: date\n          });\n        }\n        setAthleteInfoForm({\n          ...AthleteInfoForm,\n          bod: new Date(event.target.value)\n        });\n      }\n    } catch (error) {\n      if (error instanceof RangeError && error.message.includes('Invalid time value')) {\n        toast.error('Invalid date string provided');\n      } else {\n        throw error;\n      }\n    }\n\n    // if (event.target.name === 'phone' && (!/^\\d{8}$/.test(event.target.value) || event.target.value.length > 8)) {\n    //     toast.error('Phone number must be a numeric value and cannot be longer than 8 digits');\n    // } else if (event.target.name === 'HKID4digit' && (!/^[A-Za-z]\\d{3}$/.test(event.target.value) || event.target.value.length < 1 || event.target.value.length > 4)) {\n    //     toast.error('HKID must be a numeric value and between 1 and 4 digits');\n    // }\n  };\n  const handleFileUpload = event => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = async loadEvent => {\n          var _loadEvent$target;\n          const fileContent = (_loadEvent$target = loadEvent.target) === null || _loadEvent$target === void 0 ? void 0 : _loadEvent$target.result;\n          if (file.name.endsWith('.csv')) {\n            const csvData = fileContent.split('\\n').map((row, index) => {\n              const [athleteName, bod, phone, addr, HKID4digit] = row.split(',');\n              return {\n                athleteId: getNextAthleteId(),\n                // generate a unique athleteId\n                athleteName: athleteName.trim(),\n                bod: new Date(bod),\n                phone: phone.trim(),\n                password: '',\n                // add a default password\n                addr: addr.trim(),\n                HKID4digit: HKID4digit.trim()\n              };\n            });\n            const resolvedCsvData = await Promise.all(csvData.map(async data => {\n              return {\n                ...data,\n                athleteId: await data.athleteId // wait for the promise to resolve\n              };\n            }));\n            uploadAthleteInfo(resolvedCsvData);\n          } else if (file.name.endsWith('.json')) {\n            const jsonData = JSON.parse(fileContent);\n            uploadAthleteInfo(jsonData);\n          } else {\n            console.error('Unsupported file format');\n          }\n        };\n        reader.readAsText(file);\n      }\n    }\n  };\n  const uploadAthleteInfo = athleteInfo => {\n    axios.post(`http://${serverHost}/api/uploadAthleteInfo`, athleteInfo).then(response => {\n      console.log(response.data);\n      toast.success('Athlete information uploaded successfully');\n    }).catch(error => {\n      console.error(error);\n      toast.error('Failed to upload athlete information');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Athlete Registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"athleteName\",\n          className: \"input\",\n          value: AthleteInfoForm.athleteName,\n          placeholder: \"Your Full Name\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"bod\",\n          className: \"input\",\n          value: moment(AthleteInfoForm.bod).format('YYYY-MM-DD'),\n          placeholder: \"Birthday\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"phone\",\n          className: \"input\",\n          value: AthleteInfoForm.phone,\n          placeholder: \"Phone Number\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"addr\",\n          className: \"input\",\n          value: AthleteInfoForm.addr,\n          placeholder: \"Address\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"HKID4digit\",\n          className: \"input\",\n          value: AthleteInfoForm.HKID4digit.toUpperCase(),\n          placeholder: \"HKID first 4 digit\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"file\",\n          accept: \".json, .csv\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => uploadAthleteInfo([AthleteInfoForm]),\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n_s(AthleteReg, \"iq1LPwP0fx6biv3W5d/Qtie6oDc=\");\n_c = AthleteReg;\nexport default AthleteReg;\nvar _c;\n$RefreshReg$(_c, \"AthleteReg\");","map":{"version":3,"names":["React","useState","toast","axios","moment","jsxDEV","_jsxDEV","serverHost","getNextAthleteId","response","get","count","data","console","log","undefined","nextId","formattedId","toString","padStart","error","AthleteReg","_s","AthleteInfoForm","setAthleteInfoForm","athleteId","athleteName","bod","Date","phone","password","addr","HKID4digit","validatePassword","hasUppercase","test","hasLowercase","hasNumber","isLongEnough","length","setError","validatePhoneNumber","phoneNumber","isValidPhoneNumber","validateHKID","HKID","isValidHKID","handleSubmit","event","preventDefault","isValidPassword","newAthleteId","String","post","then","success","catch","handleChange","target","name","value","date","RangeError","message","includes","handleFileUpload","files","file","reader","FileReader","onload","loadEvent","_loadEvent$target","fileContent","result","endsWith","csvData","split","map","row","index","trim","resolvedCsvData","Promise","all","uploadAthleteInfo","jsonData","JSON","parse","readAsText","athleteInfo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","format","toUpperCase","accept","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/Users/issaclee/nodejs/training-record/frontend/src/Pages/AthleteReg.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\n//import { AthleteInfoForm } from '../Model/Interface';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst serverHost = 'localhost:3001'\r\n\r\ninterface AthleteInfoForm {\r\n    athleteId: string;\r\n    athleteName: string;\r\n    bod: Date;\r\n    phone: string;\r\n    password: string;\r\n    //ConfirmPassword: string;\r\n    addr: string;\r\n    HKID4digit: string;\r\n}\r\n\r\nasync function getNextAthleteId(): Promise<string> {\r\n    try {\r\n        // Retrieve the total count of documents in the collection\r\n        const response = await axios.get(`http://${serverHost}/api/athletes/count`);\r\n        const count = response.data.count;\r\n        console.log(count);\r\n        // Increment the count by 1 to get the next ID\r\n        if (count === null || count === undefined) {\r\n            return 'S001'; // return the first athlete ID if there are no records\r\n          } else {\r\n            const nextId = count + 1;\r\n                    // Format the ID as per your requirements\r\n            const formattedId = `S${nextId.toString().padStart(3, '0')}`;\r\n            return formattedId;\r\n          }\r\n    } catch (error) {\r\n        console.error('Error retrieving athlete count:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst AthleteReg = () => {\r\n    const [AthleteInfoForm, setAthleteInfoForm] = useState<AthleteInfoForm>({\r\n        athleteId: '',\r\n        athleteName: '',\r\n        bod: new Date(),\r\n        phone: '',\r\n        password: '',\r\n        //ConfirmPassword: '',\r\n        addr: '',\r\n        HKID4digit: ''\r\n    });\r\n\r\n    const validatePassword = (password: string) => {\r\n        const hasUppercase = /[A-Z]/.test(password);\r\n        const hasLowercase = /[a-z]/.test(password);\r\n        const hasNumber = /\\d/.test(password);\r\n        const isLongEnough = password.length >= 10;\r\n\r\n        if (!password) {\r\n            setError('Password is required');\r\n            return true;\r\n        }\r\n\r\n        if (!isLongEnough) {\r\n            setError('Password must be at least 10 characters long');\r\n            return false;\r\n        }\r\n\r\n        if (!isLongEnough) {\r\n            toast.error('Password must be at least 10 characters long');\r\n            return false;\r\n        }\r\n\r\n        if (!hasUppercase || !hasLowercase || !hasNumber) {\r\n            toast.error('Password must contain at least one uppercase letter, one lowercase letter, and one number');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    const validatePhoneNumber = (phoneNumber: string) => {\r\n        const isValidPhoneNumber = /^\\d{8}$/.test(phoneNumber);\r\n        if (!isValidPhoneNumber) {\r\n            setError('Support HK number only');\r\n            return false;\r\n        }\r\n        setError('');\r\n        return true;\r\n    };\r\n\r\n    const validateHKID = (HKID: string) => {\r\n        const isValidHKID = /^[A-Z]\\d{3}$/.test(HKID);\r\n        if (!isValidHKID) {\r\n            setError('Invalid HKID format');\r\n            return false;\r\n        }\r\n        setError('');\r\n        return true;\r\n    };\r\n\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        const isValidPassword = validatePassword(AthleteInfoForm.password);\r\n        const isValidPhoneNumber = validatePhoneNumber(AthleteInfoForm.phone);\r\n        const isValidHKID = validateHKID(AthleteInfoForm.HKID4digit);\r\n        const newAthleteId = String(getNextAthleteId());\r\n\r\n        //setAthleteInfoForm({...AthleteInfoForm, athleteId: newAthleteId});\r\n\r\n        if (!isValidPassword || !isValidPhoneNumber || !isValidHKID) {\r\n            return;\r\n        }\r\n\r\n        // Send data to server\r\n        axios.post(`http://${serverHost}/api/addAthleteInfo`, AthleteInfoForm)\r\n            .then((response) => {\r\n                console.log(newAthleteId);\r\n                console.log(response.data);\r\n                setAthleteInfoForm({\r\n                    athleteId: '',\r\n                    athleteName: '',\r\n                    bod: new Date(),\r\n                    phone: '',\r\n                    password: '',\r\n                    //ConfirmPassword: '',\r\n                    addr: '',\r\n                    HKID4digit: ''\r\n                });\r\n                toast.success('Data submitted successfully!');\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                toast.error('Error submitting data!');\r\n            });\r\n\r\n    };\r\n\r\n    // Handle change - SppedSlalom form  \r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        try {\r\n            setAthleteInfoForm({ ...AthleteInfoForm, [event.target.name]: event.target.value });\r\n\r\n            if (event.target.name === 'bod') {\r\n                const date = new Date(event.target.value);\r\n                if (date < AthleteInfoForm.bod) {\r\n                    toast.error('Date should not be in the future');\r\n                } else {\r\n                    setAthleteInfoForm({ ...AthleteInfoForm, bod: date });\r\n                }\r\n                setAthleteInfoForm({ ...AthleteInfoForm, bod: new Date(event.target.value) });\r\n            }\r\n        } catch (error) {\r\n            if (error instanceof RangeError && error.message.includes('Invalid time value')) {\r\n                toast.error('Invalid date string provided');\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        // if (event.target.name === 'phone' && (!/^\\d{8}$/.test(event.target.value) || event.target.value.length > 8)) {\r\n        //     toast.error('Phone number must be a numeric value and cannot be longer than 8 digits');\r\n        // } else if (event.target.name === 'HKID4digit' && (!/^[A-Za-z]\\d{3}$/.test(event.target.value) || event.target.value.length < 1 || event.target.value.length > 4)) {\r\n        //     toast.error('HKID must be a numeric value and between 1 and 4 digits');\r\n        // }\r\n    };\r\n\r\n    const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const files = event.target.files;\r\n        if (files && files.length > 0) {\r\n            const file = files[0];\r\n            if (file) {\r\n                const reader = new FileReader();\r\n                reader.onload = async (loadEvent) => {\r\n                    const fileContent = loadEvent.target?.result as string;\r\n\r\n                    if (file.name.endsWith('.csv')) {\r\n                        const csvData = fileContent.split('\\n').map((row, index) => {\r\n                            const [athleteName, bod, phone, addr, HKID4digit] = row.split(',');\r\n                            return {\r\n                                athleteId: getNextAthleteId(), // generate a unique athleteId\r\n                                athleteName: athleteName.trim(),\r\n                                bod: new Date(bod),\r\n                                phone: phone.trim(),\r\n                                password: '', // add a default password\r\n                                addr: addr.trim(),\r\n                                HKID4digit: HKID4digit.trim(),\r\n                            };\r\n                        });\r\n                        const resolvedCsvData = await Promise.all(csvData.map(async (data) => {\r\n                            return {\r\n                                ...data,\r\n                                athleteId: await data.athleteId, // wait for the promise to resolve\r\n                            };\r\n                        }));\r\n                        uploadAthleteInfo(resolvedCsvData);\r\n                    } else if (file.name.endsWith('.json')) {\r\n                        const jsonData = JSON.parse(fileContent);\r\n                        uploadAthleteInfo(jsonData);\r\n                    } else {\r\n                        console.error('Unsupported file format');\r\n                    }\r\n                };\r\n                reader.readAsText(file);\r\n            }\r\n        }\r\n    };\r\n\r\n    const uploadAthleteInfo = (athleteInfo: AthleteInfoForm[]) => {\r\n        axios.post(`http://${serverHost}/api/uploadAthleteInfo`, athleteInfo)\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                toast.success('Athlete information uploaded successfully');\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                toast.error('Failed to upload athlete information');\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1 className='title'>Athlete Registration</h1>\r\n            <div className='container'>\r\n                <form className='form' onSubmit={handleSubmit}>\r\n                    <input type=\"text\" name=\"athleteName\" className=\"input\" value={AthleteInfoForm.athleteName} placeholder=\"Your Full Name\" onChange={handleChange} required />\r\n                    <span></span>\r\n                    {/* <input type=\"date\" name=\"bod\" value={AthleteInfoForm.bod.toISOString().split('T')[0] format=\"yyyy-MM-dd\"} max=\"9999-12-31\" placeholder=\"Birthday\" onChange={handleChange} required /> */}\r\n                    <input type=\"date\" name=\"bod\" className=\"input\" value={moment(AthleteInfoForm.bod).format('YYYY-MM-DD')} placeholder=\"Birthday\" onChange={handleChange} required />\r\n                    <input type=\"text\" name=\"phone\" className=\"input\" value={AthleteInfoForm.phone} placeholder=\"Phone Number\" onChange={handleChange} required />\r\n                    {/* <input type=\"password\" name=\"password\" value={AthleteInfoForm.password} placeholder=\"Password\" onChange={handleChange} required />\r\n                <input type=\"password\" name=\"ConfirmPassword\" value={AthleteInfoForm.ConfirmPassword} placeholder=\"Confirm Password\" onChange={handleChange} required /> */}\r\n                    <input type=\"text\" name=\"addr\" className=\"input\" value={AthleteInfoForm.addr} placeholder=\"Address\" onChange={handleChange} required />\r\n                    <input type=\"text\" name=\"HKID4digit\" className=\"input\" value={AthleteInfoForm.HKID4digit.toUpperCase()} placeholder=\"HKID first 4 digit\" onChange={handleChange} required />\r\n\r\n                    <button type=\"submit\">Submit</button>\r\n\r\n                    <input type=\"file\" name=\"file\" accept=\".json, .csv\" onChange={handleFileUpload} />\r\n                    <button type=\"button\" onClick={() => uploadAthleteInfo([AthleteInfoForm])}>Upload</button>\r\n                    {error && <div style={{ color: 'red' }}>{error}</div>}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AthleteReg;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}